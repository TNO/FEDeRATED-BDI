import net.corda.plugins.Cordform

plugins {
    id 'net.corda.plugins.cordapp' version "$corda_gradle_plugin_version"
    id 'net.corda.plugins.cordformation' version "$corda_gradle_plugin_version"
    id 'net.corda.plugins.quasar-utils' version "$corda_gradle_plugin_version"
}

jar {
    enabled = false
}

// Module dependencies
dependencies {

    // Corda dependencies.
    cordaCompile "net.corda:corda-core"
    cordaRuntime "net.corda:corda"
    cordaRuntime "net.corda:corda-node-api"
    cordaDriver "net.corda:corda-shell"

    // CorDapp dependencies.
    cordapp project(":corda:workflows")
    cordapp project(":corda:contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    cordaCompile "org.apache.logging.log4j:log4j-web:$log4j_version"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

// Task to deploy a single node. Note that to use this node a notary node and any other nodes should be set up separately
// and the additional-node-infos should be populated. Alternatively a network map service can be configured.
task deploySingleNode(type: Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':corda:contracts')
        cordapp project(':corda:workflows')
        runSchemaMigration = false
    }
    node {
        name "O=SingleNode,L=TestCity,C=NL,OU=SN"
        p2pAddress "localhost:10005"
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[user: "user1", "password": "vzzuABeCut3jGoJfEp94", "permissions": ["ALL"]]]
    }

    doLast {
        copy {
            from '../workflows/src/main/resources/database.properties'
            from '../workflows/src/main/resources/ishare.properties'
            into "build/nodes/SingleNode_SN"
        }
    }
}

// Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':corda:contracts')
        cordapp project(':corda:workflows')
        runSchemaMigration = false //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=Notary,L=Luxemburg,C=LU,OU=Notary"
        notary = [validating: false]
        p2pAddress "localhost:10002"
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=Grenswacht,L=Rotterdam,C=NL,OU=MS"
        p2pAddress "localhost:10005"
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[user: "user1", "password": "vzzuABeCut3jGoJfEp94", "permissions": ["ALL"]]]
    }
    node {
        name "O=Tradeviewer,L=Hull,C=GB,OU=LSP"
        p2pAddress "localhost:10008"
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[user: "user1", "password": "vzzuABeCut3jGoJfEp94", "permissions": ["ALL"]]]
    }
    node {
        name "O=Cargobase,L=Dusseldorf,C=DE,OU=LSP"
        p2pAddress "localhost:10011"
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        rpcUsers = [[user: "user1", "password": "vzzuABeCut3jGoJfEp94", "permissions": ["ALL"]]]
    }

    doLast {
        copy {
            from '../workflows/src/main/resources/database.properties'
            from '../workflows/src/main/resources/ishare.properties'
            into "build/nodes/Grenswacht_MS"
        }
        copy {
            from '../workflows/src/main/resources/database.properties'
            from '../workflows/src/main/resources/ishare.properties'
            into "build/nodes/Tradeviewer_LSP"
        }
        copy {
            from '../workflows/src/main/resources/database.properties'
            from '../workflows/src/main/resources/ishare.properties'
            into "build/nodes/Cargobase_LSP"
        }
        copy {
            into "build/nodes/Notary_Notary"
        }
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

//Task to build the jar for ganache.
task ganache {
    subprojects {
        if (it.project.name != "clients") {
            dependsOn jar
            doLast {
                copy {
                    from "${buildDir}/libs"
                    into "${rootDir}/build/libs"
                }
            }
        }
    }
}